Make sure to tell the TAs to give students worksheet
so they can try to solve problems in sections
rather than observe how the TA solves problems.

TODO:
- Students told me that the workload in this class
was not too high, so we could just add a written
assignment on datalog/RA/RC and another on
ER/FDs/constraints/views.

TODO:
> I did not have any web quizes about the last few topics because
> I didn't find enough good questions about them. But we need
> to add some concrete exercises for those topics. Otherwise, students
> have only a vague understanding. However, there doesn't seem to be room
> for a 7th homework. Perhaps we should create Gradiance questions?
> 
> Also, the students like the web quizes but I find that students did
> not internalize some of the material (e.g., BCNF decomposition) as
> well as in 444 because there are no assignments on some topics. We
> need to make sure that students do practical exercises for all topics.
> 

---------------------------------------------------------------------
ASSIGNMENTS
---------------------------------------------------------------------
In Hw2, students struggled with getting query 3 to run fast.
This query seems to hit on some limitation of the SQLite query
optimizer because the speed seems to depend on the order of the
predicates in the WHERE clause. I didn't get to investigate this yet.
This seems odd given the documentation. In any case, if this is
a trouble query, then perhaps we should move it to hw3.

Also, students had problems loading the data. Initially, the
problem was with casts because of a \ without anything being escaped.
I replaced all the " and \ characters with XXXX and YYYY, which solved
the problem for this file. But then some students complained about
problems with loading the ascii version of actors.txt.... the primary
key check was failing.

Both problems need to be checked carefully before we reuse hw2 again.

---------------------------------------------------------------------
Course content:
---------------------------------------------------------------------
Lecture 1: OK
Lecture 2: OK. 

Lecture 3: Covered outer joins in lecture 4 and now there is
plenty of time. But need to update the notes next time to
delete the outer joins from lecture 3 notes.
 
Lecture 4: Plenty of time. With the slides, I comfortably
covered outer-joins, and aggregation up to but excluding having.

Lecture 5: Finished aggregation right on time.
 
Lecture 6: OK but it helped that we had an extra lecture
on this between lectures 5 and 6 (see schedule). 
Next time, perhaps cover some of the extra lecture
material at the end of Lecture 5 if time permits? 
 
Lecture 7: OK.
Lectures 8: OK.

Lecture 9: Query evaluation. Here. I had too much time
and showed the students how to compute the costs of the
physical plans at the end of the notes. I also discussed
statistics and how to compute the selectivity of a predicate
with the caveat that the DBMS makes simplifying assumpitons
that can be wrong. Next time, perhaps move the content
of the extra lecture to this lecture or add a few slides
about the high-level overview of query optimization. 
 
Lectures 10 and 11: OK. Although note that I did
not cover the named and unnamed perspectives. I don't think
this is necessary since we discuss only the tuple relational
calculus anyway.

Lecture 12: OK
Lecture 13: OK 
Lecture 14: OK but ended a bit early.
Lecture 15: OK but ended a bit early even with a demonstration
of a trigger. Perhaps we could do a live demonstration of
foreign keys and cascaded updates? Or we could show more
examples of triggers. That part is fun.
 
Lecture 17 on views: I re-did the slides as per the notes.
 
Series of lectures on transactions:
 
Lecture 18 
-- Basic demo: what happens without transactions
 and how we can fix it with transactions.
 -- Definition of a transaction
 -- ACID properties
 -- How transactions protect against both concurrency and failures
 -- How transactions simplify application development
 Note: I also spent 10 min talking about the data intensive biology (DISW)
 workshop as a way to get students excited about open problems with fun implications.
 
 Lecture 19
 -- All about locking.
 -- Demo showing SQL Server and different
 isolation levels.
 -- Deadlocks
 I didn't do a good job talking about schedules and how to check
 if a schedule is conflict-serializable. This part needs to be improved.
 
 Lecture 20
 -- We reviewed Lecture 19. That was useful because
 students were still confused about key concepts.
 -- Then we discussed going beyond transactions. That worked well.
 
 Lecture 21-24 Parallel DBMSs and MapReduce
 
 This series of lectures is good but it goes too fast.
 Students have never seen parallel data processing before.
 We need to go slower and give more white-board examples.
 So I added an extra lecture to cover this topic without rushing.
 
 We need to change the slides to more clearly indicate what is a *job*
 and what is a *task*.
 
Dan says: Indeed, this discussion is very usueful.  I added it to pptx, and discussed it repeatedly in class. Students got it now.

Also, we should go through a concrete exampl of translating a pig
script into a set of MapReduce jobs. And we need some examples
of writing MapReduce applications. There was no time in sections
because of hw6 setup questions.
 
 
 Lecture 25: DBMS-as-a-service + NoSQL
 
The part about No SQL is most interesting and
did nto come through. I suggest removing the stuff
about the Google and Azure clouds and just focus on SimpleDB
as an example of a NoSQL data management system. This way,
they will have two examples: MapReduce and SimpleDB.
 
Lecture 26-27: Data integration and data cleaning.
Ok lectures but I agree that it would be good for students
to practice this material.
