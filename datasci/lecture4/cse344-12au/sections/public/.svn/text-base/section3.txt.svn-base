-- CSE 344 section 3 -- (10/11/2012)

-----------------------------------------------------

Part One:
Answering questions on HW2. 
If your queries run with different speed on different operation system, dont worry about it.
Make sure the SQL queries are correct, and the index make sense.

-----------------------------------------------------


Part Two
For HW 3, we will be using SQL Server 2008 R2 on vdi.cs.washington.edu instead of sqlite(see  http://vdi.cs.washington.edu/vdi/).  You can use Microsoft Remote Desktop to connect (free to download for Windows and Mac).  I will show you how to do this in the section, but for those who miss sections, the connection information will be posted along with the homework. Please carefully follow the steps on the write up of HW3 to set up. Please start this homework early.
Note that you can also do this homework on any PC machines in CSE labs.
Please contact us if you have any questions.

-----------------------------------------------------
--Part Three

--To warm up for HW3, let s do some exercise on "Nested Subqueires":

--Example:
 
-- Same database as last week:
--   Class(dept, number, title)
--   Instructor(username, fname, lname, started_on)
--   Teaches(username, dept, number)
-- See section2-schema.sql for CREATE TABLE and sample data for this database.

--Last time went over grouping, aggregations, and joins.  This week nested subqueries.



/* Nested Subqueries */
-- Useful for next assignment

-- 1). How many classes are being taught by at least one instructor?


SELECT COUNT(DISTINCT number) AS class_count
FROM Teaches;

-- General case: we'll solve using subqueries and grouping - first, we group the 
-- Teaches table by department and number in a subquery, then
-- we count the number of groups in the top-level query. 


-- Note that we don't care what the subquery tuples are, only how many 
-- tuples/groups there are, so we return dummy tuples containing only the
-- constant 1.


SELECT COUNT(*) AS class_count
FROM (
  SELECT 1
  FROM Teaches
  GROUP BY dept, number
) x ;


-----------------------------------------------------

-- 2). -- Which instructors teach more than 1 class?

-- With grouping -- no subquery
SELECT i.username, i.fname, i.lname
FROM Instructor i, Teaches t
WHERE i.username = t.username
GROUP BY i.username, i.fname, i.lname
HAVING COUNT(*) > 1
;

-- Without grouping -- uses subquery
-- We refer to this kind of subquery as a correlated subquery
-- i is unbound in context of subquery, but is correlated to outer query
-- For each instructor, we issue the subquery

SELECT i.username, i.fname, i.lname
FROM Instructor i
WHERE 1 < (
  SELECT COUNT(*)
  FROM Teaches t
  WHERE t.username = i.username
)
;

-----------------------------------------------------

-- 3). -- Which courses do neither Dr. Levy nor Dr. Wetherall teach?
-- Sounds like a universal quantifier will be needed (e.g. NOT IN, ONLY, ALL)!
-- wrong --- why?
SELECT c.dept, c.number, c.title
FROM Class c, Teaches t
WHERE c.dept = t.dept AND 
      c.number = t.number AND 
      t.username NOT IN ('levy', 'djw')
;
-- This query incorrectly returns CSE 451 and 461 (twice, in fact), 
-- because there are tuples in the join where the uid is neither 
-- levy or djw, but the class is 451 and 461 -- this comes about 
-- from the fact that tom and zahorjan teach those classes.

-- Here's a corrected version that tests that the *class number* 
-- is not in the list that Hank and David teach:
SELECT *
FROM Class c
WHERE c.dept = 'CSE' AND 
      c.number NOT IN (
        SELECT c.number
        FROM Class c, Teaches t
        WHERE c.dept = t.dept AND 
              c.number = t.number AND
              t.username IN ('levy', 'djw')
)
;
-- This (correctly) returns only CSE 378.

