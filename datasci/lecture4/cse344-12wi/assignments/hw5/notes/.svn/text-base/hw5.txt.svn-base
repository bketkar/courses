TA: please adapt this hw from:

http://www.cs.washington.edu/education/courses/cse444/11wi/project/project2/project2.html

Make the following changes:

1. There will be a single database instead of two.  The database will
be in postgres.

2. Students have to upload imdb in postgres.  Starting from the six
files actor.txt, movie.txt, ... they first need to convert it to ASCII
then load it in postgres using the "copy" command.  Ask the instructor
for the code.

3. Homework 5 consists of task 1 from
http://www.cs.washington.edu/education/courses/cse444/11wi/project/project2/project2.html

plus, item 5 of Task 2 ("fastsearch").  We should modify this to allow
the students some freedom.  That is, we will ask them to do whatever
they want to make it as fast as possible.  (What I have in mind:
create an index on all movie title postfixes, then use an index
lookup, plus outer joins)

MR: 
the index on movie title words (not postfixes) could be a "manual index",
i.e. a table like so: Suffix (mid, title_suffix).  

One promising approach: use the Postgres built-in function 
regexp_split_to_table(string, regex) to split table names into words:

imdb=> select * from movie where 147577 <= id and id <= 147580;
   id   |                                 name                                 | year 
--------+----------------------------------------------------------------------+------
 147577 | Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb | 1964
 147578 | Die Achatmurmel                                                      | 1960
 147579 | Cobani                                                               | 1998
 147580 | Double Whoopee                                                       | 1929
(4 rows)

Time: 0.839 ms
imdb=> select id, regexp_split_to_table(name, E'\\s+') from movie where 147577 <= id and id <= 147580;
   id   | regexp_split_to_table 
--------+-----------------------
 147577 | Dr.
 147577 | Strangelove
 147577 | or:
 147577 | How
 147577 | I
 147577 | Learned
 147577 | to
 147577 | Stop
 147577 | Worrying
 147577 | and
 147577 | Love
 147577 | the
 147577 | Bomb
 147578 | Die
 147578 | Achatmurmel
 147579 | Cobani
 147580 | Double
 147580 | Whoopee
(18 rows)

Time: 1.309 ms


Students would create this table Suffix.
We need to figure out how to break the movie title into words,
using Java or SQL string manipulation.
Or we can just do actual suffixes, by substring from index N on
of the string, and use SQL tricks like tables with 1,2,3,4,5,....
to "iterate" over the start index N.

We may keep all of the stuff from the old project 2, rather
than just dropping everything except schema and fastsearch.
But we should check how much is busywork.

The primary focus will be transactions - which would require keeping
the old video store problems (the parts of task 2 originally eliminated).  
Transaction semantics should be pervasive in the instructions and 
enforced in the grading.  Read/write, isolation levels, and so on.
Future speculation: can we do automatic transaction verification?

One way to have students manually test atomicity:
Rent a movie TX:
  c := how many movies rented out
  m := max rentals
  if c < m: 
    then insert into rentals
    else "Sorry..."

Have students add a PAUSE AND WAIT FOR BLANK LINE FROM CONSOLE 
in the middle of this tx, after reading the data c, m. Then students 
can run two concurrent copies of this txn under two logins, 
let one proceed first after the blank, and see what happens to the 
other.

Because Postgres does not do transactions well, a manual lock in the Java
code might be needed to do serializability properly.
