Task 1 (CUSTOMER database design): 20 points
     10 points: Correct entity sets
     5 points: Correct relationships (REFERENCES, and so on)
     5 points: Sample data (min 8 tuples)

Task 2A (Completing search): 20 points
     [This was overweighted -- MR]
     10 points: actors for each movie
     10 points: movie availability status

Task 2B (Fastsearch): 20 points
     14 points: Constant number of queries
     6 points: Correct information - movie title, year
     +2 points EC: director information
     +2 points EC: availability info (allowed to use O(n) queries here)

Task 2C (Transactional stuff): 30 points
     For all, check correct TX use (customer "locks", etc.)
     3 points: login
        no need to check in detail (don't try to "break" in)
     3 points: print customer info
       name, movies remaining
     3 points: print all plans
     7 points: change plan
       only if new plan has enough movies
     7 points: rent movie
       only if movie is available (not rented by them or someone else)
     7 points: return movie
       only if they are renting it

Task 2D (stop SQL injection in search): 10 points
     Should be using PreparedStatement and parameters.
     -7 points if they try to "sanitize" the input

Notes:
     Our fake "locks" seem to work fine even if they get
     assigned the same value as before (i.e. Postgres doesn't
     try, wrongly, to optimize the updates out).
